# Example configuration entry
sensor:
  - platform: wifi_signal
    name: "HWC ESP WiFi Signal Sensor"
    update_interval: 60s

time:
- platform: homeassistant
  id: hatime
  timezone: Etc/GMT+0 


  on_time_sync:
    then:
      - if:
         condition:
           lambda: return id(my_global_int) == 0;
         then:  
              - uart.write: !lambda |-
                  char buf[20];
                  sprintf(buf, "T%lu\n", hatime->now().timestamp + 43200 + 3600 - (3 * 3600) );
                  std::string s = buf;
                  return std::vector<unsigned char>( s.begin(), s.end() );
                  id(my_global_int) += 1;
           
  on_time:
      # SUMMER: Update time every day @ 1800hrs. Need + 12hr correction (GMT), + 1hr correction DST, - 5hr correction so heating occurs at 0500 not midnight!!
      - seconds: 0
        minutes: 0
        hours: 6
        months: 9 - 2
        then:
           - logger.log: "It's 1800hrs - Time Sent!"
           - uart.write: !lambda |-
              char buf[20];
              sprintf(buf, "T%lu\n", hatime->now().timestamp + 43200 + 3600 - (5 * 3600) );
              std::string s = buf;
              return std::vector<unsigned char>( s.begin(), s.end() );

      # WINTER: Update time every day @ 1800hrs. Need + 12hr correction (GMT), + 1hr correction DST, - 3hr correction so heating occurs at 0300 not midnight!!
      - seconds: 0
        minutes: 0
        hours: 6
        months: 3 - 8
        then:
           - logger.log: "It's 1800hrs - Time Sent!"
           - uart.write: !lambda |-
              char buf[20];
              sprintf(buf, "T%lu\n", hatime->now().timestamp + 43200 + 3600 - (3 * 3600) );
              std::string s = buf;
              return std::vector<unsigned char>( s.begin(), s.end() );
